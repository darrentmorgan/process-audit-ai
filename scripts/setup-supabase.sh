#!/bin/bash

# ProcessAudit AI - Supabase Setup Script
# This script creates a new Supabase project and configures your environment

set -e

echo "🚀 ProcessAudit AI - Supabase Setup"
echo "===================================="

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "❌ Supabase CLI is not installed."
    echo "Install it with: npm install -g supabase"
    echo "Or visit: https://supabase.com/docs/guides/cli"
    exit 1
fi

echo "✅ Supabase CLI found"

# Check if user is logged in
if ! supabase projects list &> /dev/null; then
    echo "🔐 Please log in to Supabase first:"
    supabase login
fi

echo "✅ Supabase authentication verified"

# Get project details
echo ""
echo "📋 Project Setup"
echo "=================="
read -p "Enter project name (default: process-audit-ai): " PROJECT_NAME
PROJECT_NAME=${PROJECT_NAME:-process-audit-ai}

read -p "Enter organization (leave empty for default): " ORG_ID
read -p "Enter database password (leave empty for auto-generated): " DB_PASSWORD
read -p "Enter region (default: us-east-1): " REGION
REGION=${REGION:-us-east-1}

echo ""
echo "🏗️  Creating Supabase project..."

# Build the create command
CREATE_CMD="supabase projects create '$PROJECT_NAME' --region $REGION"

if [ ! -z "$ORG_ID" ]; then
    CREATE_CMD="$CREATE_CMD --org-id $ORG_ID"
fi

if [ ! -z "$DB_PASSWORD" ]; then
    CREATE_CMD="$CREATE_CMD --db-password '$DB_PASSWORD'"
fi

# Create the project
eval $CREATE_CMD

echo "✅ Project created successfully!"

# Get project details
echo ""
echo "📊 Retrieving project information..."

# List projects to get the project ID
PROJECT_LIST=$(supabase projects list --output json)
PROJECT_REF=$(echo $PROJECT_LIST | jq -r ".[] | select(.name == \"$PROJECT_NAME\") | .id")

if [ -z "$PROJECT_REF" ] || [ "$PROJECT_REF" = "null" ]; then
    echo "❌ Could not find the created project. Please check manually."
    echo "Run: supabase projects list"
    exit 1
fi

echo "✅ Project ID: $PROJECT_REF"

# Get API details
echo "🔑 Getting API credentials..."

API_DETAILS=$(supabase projects api-keys --project-ref $PROJECT_REF --output json)
ANON_KEY=$(echo $API_DETAILS | jq -r '.anon')
SERVICE_ROLE_KEY=$(echo $API_DETAILS | jq -r '.service_role')

PROJECT_URL="https://$PROJECT_REF.supabase.co"

echo "✅ Credentials retrieved"

# Initialize local Supabase project
echo ""
echo "🔧 Initializing local Supabase configuration..."

if [ ! -f "supabase/config.toml" ]; then
    supabase init
fi

# Link to the remote project
supabase link --project-ref $PROJECT_REF

echo "✅ Local project linked to remote"

# Apply database schema
echo ""
echo "🗄️  Setting up database schema..."

# Copy our schema to the migrations folder
MIGRATION_FILE="supabase/migrations/$(date +%Y%m%d%H%M%S)_initial_schema.sql"
cp database/schema.sql "$MIGRATION_FILE"

# Push the migration to the remote database
supabase db push

echo "✅ Database schema applied"

# Update environment variables
echo ""
echo "🔧 Updating environment variables..."

# Backup existing .env.local if it exists
if [ -f ".env.local" ]; then
    cp .env.local .env.local.backup
    echo "📄 Backed up existing .env.local to .env.local.backup"
fi

# Update .env.local
cat > .env.local << EOF
# ProcessAudit AI Environment Variables
# Generated by setup-supabase.sh on $(date)

# Claude API Key - Add your API key here
# CLAUDE_API_KEY=your_claude_api_key_here

# Supabase Configuration
NEXT_PUBLIC_SUPABASE_URL=$PROJECT_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=$ANON_KEY

# Service role key (keep this secret - only for server-side operations)
SUPABASE_SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY

# Next.js Environment
NEXT_PUBLIC_APP_URL=http://localhost:3000
EOF

echo "✅ Environment variables updated in .env.local"

# Show summary
echo ""
echo "🎉 Setup Complete!"
echo "=================="
echo ""
echo "Project Details:"
echo "  Name: $PROJECT_NAME"
echo "  ID: $PROJECT_REF"
echo "  URL: $PROJECT_URL"
echo "  Dashboard: https://supabase.com/dashboard/project/$PROJECT_REF"
echo ""
echo "Environment Variables (saved to .env.local):"
echo "  NEXT_PUBLIC_SUPABASE_URL=$PROJECT_URL"
echo "  NEXT_PUBLIC_SUPABASE_ANON_KEY=$ANON_KEY"
echo ""
echo "Next Steps:"
echo "  1. Start your development server: npm run dev"
echo "  2. Test authentication by signing up/in"
echo "  3. Try saving an audit report"
echo "  4. Visit your Supabase dashboard to monitor usage"
echo ""
echo "📚 Documentation:"
echo "  - Supabase Dashboard: https://supabase.com/dashboard/project/$PROJECT_REF"
echo "  - Local Admin: http://localhost:54323 (when running supabase start)"
echo "  - API Docs: https://supabase.com/dashboard/project/$PROJECT_REF/api"
echo ""
echo "🔧 Useful Commands:"
echo "  supabase status           # Check local services"
echo "  supabase logs api         # View API logs"
echo "  supabase db diff          # Check for schema changes"
echo "  supabase functions deploy # Deploy edge functions"
echo ""

# Optional: Start local development
echo "Would you like to start local Supabase development services? (y/N)"
read -r response
if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo "🚀 Starting local Supabase services..."
    supabase start
    echo ""
    echo "🎯 Local services started:"
    echo "  Studio URL: http://localhost:54323"
    echo "  API URL: http://localhost:54321"
    echo "  DB URL: postgresql://postgres:postgres@localhost:54322/postgres"
fi

echo ""
echo "✨ Your ProcessAudit AI application is now ready with Supabase authentication!"