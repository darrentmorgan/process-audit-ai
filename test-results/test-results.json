{
  "config": {
    "configFile": "/Users/darrenmorgan/AI_Projects/process-audit-ai/playwright.config.ts",
    "rootDir": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e",
    "forbidOnly": false,
    "fullyParallel": true,
    "globalSetup": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/global-setup.ts",
    "globalTeardown": null,
    "globalTimeout": 0,
    "grep": {},
    "grepInvert": null,
    "maxFailures": 0,
    "metadata": {
      "actualWorkers": 6
    },
    "preserveOutput": "always",
    "reporter": [
      [
        "list",
        null
      ],
      [
        "html",
        {
          "open": "never"
        }
      ],
      [
        "json",
        {
          "outputFile": "test-results/test-results.json"
        }
      ]
    ],
    "reportSlowTests": {
      "max": 5,
      "threshold": 300000
    },
    "quiet": false,
    "projects": [
      {
        "outputDir": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 6
        },
        "id": "chromium",
        "name": "chromium",
        "testDir": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      },
      {
        "outputDir": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results",
        "repeatEach": 1,
        "retries": 0,
        "metadata": {
          "actualWorkers": 6
        },
        "id": "webkit",
        "name": "webkit",
        "testDir": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e",
        "testIgnore": [],
        "testMatch": [
          "**/*.@(spec|test).?(c|m)[jt]s?(x)"
        ],
        "timeout": 60000
      }
    ],
    "shard": null,
    "updateSnapshots": "missing",
    "updateSourceMethod": "patch",
    "version": "1.54.2",
    "workers": 6,
    "webServer": null
  },
  "suites": [
    {
      "title": "authentication.spec.ts",
      "file": "authentication.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ProcessAudit AI Authentication System",
          "file": "authentication.spec.ts",
          "line": 6,
          "column": 6,
          "specs": [
            {
              "title": "Landing Page Authentication Flow",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 0,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 4194,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByRole('button', { name: /sign up/i })\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByRole('button', { name: /sign up/i })\u001b[22m\n",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByRole('button', { name: /sign up/i })\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByRole('button', { name: /sign up/i })\u001b[22m\n\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:24:26",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                          "column": 26,
                          "line": 24
                        },
                        "snippet": "  22 |     const loginButton = page.getByRole('button', { name: /log in/i });\n  23 |\n> 24 |     expect(signUpButton).toBeVisible();\n     |                          ^\n  25 |     expect(loginButton).toBeVisible();\n  26 |   });\n  27 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                            "column": 26,
                            "line": 24
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByRole('button', { name: /sign up/i })\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByRole('button', { name: /sign up/i })\u001b[22m\n\n\n  22 |     const loginButton = page.getByRole('button', { name: /log in/i });\n  23 |\n> 24 |     expect(signUpButton).toBeVisible();\n     |                          ^\n  25 |     expect(loginButton).toBeVisible();\n  26 |   });\n  27 |\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:24:26"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.320Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-e5f35-ng-Page-Authentication-Flow-chromium/test-failed-1.png"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                        "column": 26,
                        "line": 24
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-4a1e319d9731910958d8",
              "file": "authentication.spec.ts",
              "line": 17,
              "column": 7
            },
            {
              "title": "User Registration with Organization",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 1,
                      "parallelIndex": 1,
                      "status": "timedOut",
                      "duration": 61052,
                      "error": {
                        "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m",
                        "stack": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                      },
                      "errors": [
                        {
                          "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                        },
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                            "column": 16,
                            "line": 33
                          },
                          "message": "Error: page.fill: Test timeout of 60000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('input[name=\"email\"]')\u001b[22m\n\n\n  31 |\n  32 |     // Fill out registration form\n> 33 |     await page.fill('input[name=\"email\"]', testConfig.user.email);\n     |                ^\n  34 |     await page.fill('input[name=\"password\"]', testConfig.user.password);\n  35 |     await page.fill('input[name=\"organization\"]', testConfig.user.organization);\n  36 |\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:33:16"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.324Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-2bbf6-istration-with-Organization-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-2bbf6-istration-with-Organization-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-2bbf6-istration-with-Organization-chromium/error-context.md"
                        }
                      ]
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-1b54df567499cc4b6a85",
              "file": "authentication.spec.ts",
              "line": 29,
              "column": 7
            },
            {
              "title": "Development Access Bypass",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 2,
                      "parallelIndex": 2,
                      "status": "failed",
                      "duration": 14167,
                      "error": {
                        "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('process-input-section')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('process-input-section')\u001b[22m\n",
                        "stack": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('process-input-section')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('process-input-section')\u001b[22m\n\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:50:61",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                          "column": 61,
                          "line": 50
                        },
                        "snippet": "  48 |\n  49 |     // Verify app access without full authentication\n> 50 |     await expect(page.getByTestId('process-input-section')).toBeVisible();\n     |                                                             ^\n  51 |   });\n  52 |\n  53 |   // Multi-Tenant Routing Test"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                            "column": 61,
                            "line": 50
                          },
                          "message": "Error: \u001b[31mTimed out 10000ms waiting for \u001b[39m\u001b[2mexpect(\u001b[22m\u001b[31mlocator\u001b[39m\u001b[2m).\u001b[22mtoBeVisible\u001b[2m()\u001b[22m\n\nLocator: getByTestId('process-input-section')\nExpected: visible\nReceived: <element(s) not found>\nCall log:\n\u001b[2m  - Expect \"toBeVisible\" with timeout 10000ms\u001b[22m\n\u001b[2m  - waiting for getByTestId('process-input-section')\u001b[22m\n\n\n  48 |\n  49 |     // Verify app access without full authentication\n> 50 |     await expect(page.getByTestId('process-input-section')).toBeVisible();\n     |                                                             ^\n  51 |   });\n  52 |\n  53 |   // Multi-Tenant Routing Test\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:50:61"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.330Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-6ddb6-m-Development-Access-Bypass-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-6ddb6-m-Development-Access-Bypass-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-6ddb6-m-Development-Access-Bypass-chromium/error-context.md"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                        "column": 61,
                        "line": 50
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-e970d1a2628a7a89cb14",
              "file": "authentication.spec.ts",
              "line": 46,
              "column": 7
            },
            {
              "title": "Multi-Tenant Organization Routing",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 3,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 346,
                      "error": {
                        "message": "Error: page.goto: net::ERR_NAME_NOT_RESOLVED at https://processaudit.processaudit.ai/\nCall log:\n\u001b[2m  - navigating to \"https://processaudit.processaudit.ai/\", waiting until \"load\"\u001b[22m\n",
                        "stack": "Error: page.goto: net::ERR_NAME_NOT_RESOLVED at https://processaudit.processaudit.ai/\nCall log:\n\u001b[2m  - navigating to \"https://processaudit.processaudit.ai/\", waiting until \"load\"\u001b[22m\n\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:63:18",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                          "column": 18,
                          "line": 63
                        },
                        "snippet": "  61 |\n  62 |     for (const subdomain of tenantSubdomains) {\n> 63 |       await page.goto(`https://${subdomain}.processaudit.ai`);\n     |                  ^\n  64 |\n  65 |       // Verify tenant-specific branding\n  66 |       await expect(page.getByTestId('tenant-logo')).toBeVisible();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                            "column": 18,
                            "line": 63
                          },
                          "message": "Error: page.goto: net::ERR_NAME_NOT_RESOLVED at https://processaudit.processaudit.ai/\nCall log:\n\u001b[2m  - navigating to \"https://processaudit.processaudit.ai/\", waiting until \"load\"\u001b[22m\n\n\n  61 |\n  62 |     for (const subdomain of tenantSubdomains) {\n> 63 |       await page.goto(`https://${subdomain}.processaudit.ai`);\n     |                  ^\n  64 |\n  65 |       // Verify tenant-specific branding\n  66 |       await expect(page.getByTestId('tenant-logo')).toBeVisible();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:63:18"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.320Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-8c05f-Tenant-Organization-Routing-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-8c05f-Tenant-Organization-Routing-chromium/video.webm"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                        "column": 18,
                        "line": 63
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-6d2370f63581d4cd47c6",
              "file": "authentication.spec.ts",
              "line": 54,
              "column": 7
            },
            {
              "title": "Authentication Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 4,
                      "parallelIndex": 4,
                      "status": "timedOut",
                      "duration": 61075,
                      "error": {
                        "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m",
                        "stack": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                      },
                      "errors": [
                        {
                          "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                        },
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts",
                            "column": 16,
                            "line": 76
                          },
                          "message": "Error: page.fill: Test timeout of 60000ms exceeded.\nCall log:\n\u001b[2m  - waiting for locator('input[name=\"email\"]')\u001b[22m\n\n\n  74 |\n  75 |     // Attempt login with invalid credentials\n> 76 |     await page.fill('input[name=\"email\"]', 'invalid@example.com');\n     |                ^\n  77 |     await page.fill('input[name=\"password\"]', 'WrongPassword123!');\n  78 |\n  79 |     const loginButton = page.getByRole('button', { name: /log in/i });\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/authentication.spec.ts:76:16"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.320Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-3ac31-thentication-Error-Handling-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-3ac31-thentication-Error-Handling-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/authentication-ProcessAudi-3ac31-thentication-Error-Handling-chromium/error-context.md"
                        }
                      ]
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-d045d773598ca04f6694",
              "file": "authentication.spec.ts",
              "line": 72,
              "column": 7
            },
            {
              "title": "Landing Page Authentication Flow",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 23,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.129Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-81b58998572ca2d3e4cb",
              "file": "authentication.spec.ts",
              "line": 17,
              "column": 7
            },
            {
              "title": "User Registration with Organization",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 24,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.306Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-08221416bd84bc06da12",
              "file": "authentication.spec.ts",
              "line": 29,
              "column": 7
            },
            {
              "title": "Development Access Bypass",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 25,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.537Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-fc81ea6d6081562255fd",
              "file": "authentication.spec.ts",
              "line": 46,
              "column": 7
            },
            {
              "title": "Multi-Tenant Organization Routing",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 26,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.711Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-8060b0239fe67a6ba5b9",
              "file": "authentication.spec.ts",
              "line": 54,
              "column": 7
            },
            {
              "title": "Authentication Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 27,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.803Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "70f6afe7e350c931056e-f246ead5765311ce4e30",
              "file": "authentication.spec.ts",
              "line": 72,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "complete-workflow.spec.ts",
      "file": "complete-workflow.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ProcessAudit AI - Complete Workflow",
          "file": "complete-workflow.spec.ts",
          "line": 10,
          "column": 6,
          "specs": [
            {
              "title": "Complete process audit workflow with PDF generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 120000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 5,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 6013,
                      "error": {
                        "message": "TypeError: Converting circular structure to JSON\n    --> starting at object with constructor 'TestInfoImpl'\n    |     property '_steps' -> object with constructor 'Array'\n    |     index 0 -> object with constructor 'Object'\n    |     ...\n    |     property 'info' -> object with constructor 'TestStepInfoImpl'\n    --- property '_testInfo' closes the circle",
                        "stack": "TypeError: Converting circular structure to JSON\n    --> starting at object with constructor 'TestInfoImpl'\n    |     property '_steps' -> object with constructor 'Array'\n    |     index 0 -> object with constructor 'Object'\n    |     ...\n    |     property 'info' -> object with constructor 'TestStepInfoImpl'\n    --- property '_testInfo' closes the circle\n    at TestReporter.generateFinalReport (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/test-reporter.ts:126:39)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/complete-workflow.spec.ts:209:41",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/test-reporter.ts",
                          "column": 39,
                          "line": 126
                        },
                        "snippet": "\u001b[90m   at \u001b[39m../test-reporter.ts:126\n\n  124 |     );\n  125 |     \n> 126 |     fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));\n      |                                       ^\n  127 |     \n  128 |     // Generate markdown report\n  129 |     const markdownReport = this.generateMarkdownReport(reportData);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/test-reporter.ts",
                            "column": 39,
                            "line": 126
                          },
                          "message": "TypeError: Converting circular structure to JSON\n    --> starting at object with constructor 'TestInfoImpl'\n    |     property '_steps' -> object with constructor 'Array'\n    |     index 0 -> object with constructor 'Object'\n    |     ...\n    |     property 'info' -> object with constructor 'TestStepInfoImpl'\n    --- property '_testInfo' closes the circle\n\n   at ../test-reporter.ts:126\n\n  124 |     );\n  125 |     \n> 126 |     fs.writeFileSync(reportPath, JSON.stringify(reportData, null, 2));\n      |                                       ^\n  127 |     \n  128 |     // Generate markdown report\n  129 |     const markdownReport = this.generateMarkdownReport(reportData);\n    at TestReporter.generateFinalReport (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/test-reporter.ts:126:39)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/complete-workflow.spec.ts:209:41"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔄 Test Step: Authentication\n"
                        },
                        {
                          "text": "✅ Success: Authentication - Successfully accessed app at http://localhost:3000/?access=granted\n"
                        },
                        {
                          "text": "🔄 Test Step: Process Input\n"
                        },
                        {
                          "text": "✅ Success: Process Input - Found input using selector: textarea[placeholder*=\"process\"]\n"
                        },
                        {
                          "text": "🔄 Test Step: Start Analysis\n"
                        },
                        {
                          "text": "🔄 Test Step: Direct PDF API Testing\n"
                        },
                        {
                          "text": "🔄 Test Step: Direct PDF API Testing\n"
                        }
                      ],
                      "stderr": [
                        {
                          "text": "❌ Issue documented: Start Analysis - Analysis start button to be clickable vs No analysis start button found\n"
                        },
                        {
                          "text": "❌ Issue documented: Direct PDF API - Successful API response vs HTTP 404: <!DOCTYPE html><html><head><style data-next-hide-fouc=\"true\">body{display:none}</style><noscript data-next-hide-fouc=\"true\"><style>body{display:block}</style></noscript><meta charSet=\"utf-8\"/><meta name=\"description\" content=\"AI-powered process analysis to identify automation opportunities and boost your business efficiency\" class=\"jsx-71dad167681ed3fb\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" class=\"jsx-71dad167681ed3fb\"/><link rel=\"icon\" href=\"/favicon.ico\" class=\"jsx-71dad167681ed3fb\"/><title>404: This page could not be found</title><meta name=\"next-head-count\" content=\"6\"/><noscript data-n-css=\"\"></noscript><script defer=\"\" nomodule=\"\" src=\"/_next/static/chunks/polyfills.js\"></script><script src=\"https://amusing-urchin-96.clerk.accounts.dev/npm/@clerk/clerk-js@5/dist/clerk.browser.js\" data-clerk-js-script=\"true\" async=\"\" data-clerk-publishable-key=\"pk_test_YW11c2luZy11cmNoaW4tOTYuY2xlcmsuYWNjb3VudHMuZGV2JA\" data-nscript=\"beforeInteractive\"></script><script src=\"/_next/static/chunks/webpack.js\" defer=\"\"></script><script src=\"/_next/static/chunks/main.js\" defer=\"\"></script><script src=\"/_next/static/chunks/pages/_app.js\" defer=\"\"></script><script src=\"/_next/static/chunks/pages/_error.js\" defer=\"\"></script><script src=\"/_next/static/development/_buildManifest.js\" defer=\"\"></script><script src=\"/_next/static/development/_ssgManifest.js\" defer=\"\"></script><noscript id=\"__next_css__DO_NOT_USE__\"></noscript></head><body><div id=\"__next\"><div style=\"font-family:system-ui,&quot;Segoe UI&quot;,Roboto,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;;height:100vh;text-align:center;display:flex;flex-direction:column;align-items:center;justify-content:center\"><div style=\"line-height:48px\"><style>body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}</style><h1 class=\"next-error-h1\" style=\"display:inline-block;margin:0 20px 0 0;padding-right:23px;font-size:24px;font-weight:500;vertical-align:top\">404</h1><div style=\"display:inline-block\"><h2 style=\"font-size:14px;font-weight:400;line-height:28px\">This page could not be found<!-- -->.</h2></div></div></div></div><script src=\"/_next/static/chunks/react-refresh.js\"></script><script id=\"__NEXT_DATA__\" type=\"application/json\">{\"props\":{\"pageProps\":{\"statusCode\":404}},\"page\":\"/_error\",\"query\":{},\"buildId\":\"development\",\"isFallback\":false,\"gip\":true,\"scriptLoader\":[]}</script></body></html>\n"
                        }
                      ],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:09.208Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/complete-workflow-ProcessA-46ef0-orkflow-with-PDF-generation-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/complete-workflow-ProcessA-46ef0-orkflow-with-PDF-generation-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/complete-workflow-ProcessA-46ef0-orkflow-with-PDF-generation-chromium/error-context.md"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/test-reporter.ts",
                        "column": 39,
                        "line": 126
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "09582b7787dd4995b492-2a973fea093620e711c6",
              "file": "complete-workflow.spec.ts",
              "line": 12,
              "column": 7
            },
            {
              "title": "Complete process audit workflow with PDF generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 28,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:34.853Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "09582b7787dd4995b492-0dd481a243146cbe079b",
              "file": "complete-workflow.spec.ts",
              "line": 12,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "pdf-api-direct.spec.ts",
      "file": "pdf-api-direct.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ProcessAudit AI PDF API Direct Tests",
          "file": "pdf-api-direct.spec.ts",
          "line": 4,
          "column": 6,
          "specs": [
            {
              "title": "API Direct: Generate Complete Audit Report PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 6,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 1682,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:122:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 122
                        },
                        "snippet": "  120 |\n  121 |     // Validate response\n> 122 |     expect(response.status()).toBe(200);\n      |                               ^\n  123 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  124 |     expect(response.headers()['content-disposition']).toContain('attachment');\n  125 |     expect(response.headers()['content-disposition']).toContain('api-test-audit-report.pdf');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 122
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  120 |\n  121 |     // Validate response\n> 122 |     expect(response.status()).toBe(200);\n      |                               ^\n  123 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  124 |     expect(response.headers()['content-disposition']).toContain('attachment');\n  125 |     expect(response.headers()['content-disposition']).toContain('api-test-audit-report.pdf');\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:122:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing audit report PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:10.234Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 122
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-4a63783300e81b0a7527",
              "file": "pdf-api-direct.spec.ts",
              "line": 89,
              "column": 7
            },
            {
              "title": "API Direct: Generate Executive Summary PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 7,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 26,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:166:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 166
                        },
                        "snippet": "  164 |     });\n  165 |\n> 166 |     expect(response.status()).toBe(200);\n      |                               ^\n  167 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  168 |\n  169 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 166
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  164 |     });\n  165 |\n> 166 |     expect(response.status()).toBe(200);\n      |                               ^\n  167 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  168 |\n  169 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:166:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing executive summary PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:15.760Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 166
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-2cae967422616e4312e7",
              "file": "pdf-api-direct.spec.ts",
              "line": 138,
              "column": 7
            },
            {
              "title": "API Direct: Generate SOP Document PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 8,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:201:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 201
                        },
                        "snippet": "  199 |     });\n  200 |\n> 201 |     expect(response.status()).toBe(200);\n      |                               ^\n  202 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  203 |\n  204 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 201
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  199 |     });\n  200 |\n> 201 |     expect(response.status()).toBe(200);\n      |                               ^\n  202 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  203 |\n  204 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:201:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing SOP document PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:19.919Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 201
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-4fa9b69383be8b61eb00",
              "file": "pdf-api-direct.spec.ts",
              "line": 176,
              "column": 7
            },
            {
              "title": "API Direct: Test Different Page Formats",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 9,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:228:33",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 33,
                          "line": 228
                        },
                        "snippet": "  226 |       });\n  227 |\n> 228 |       expect(response.status()).toBe(200);\n      |                                 ^\n  229 |       const buffer = await response.body();\n  230 |       expect(buffer.length).toBeGreaterThan(1000);\n  231 |       "
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 33,
                            "line": 228
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  226 |       });\n  227 |\n> 228 |       expect(response.status()).toBe(200);\n      |                                 ^\n  229 |       const buffer = await response.body();\n  230 |       expect(buffer.length).toBeGreaterThan(1000);\n  231 |       \n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:228:33"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF generation with different page formats...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:19.926Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 33,
                        "line": 228
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-33d429534a93b40af983",
              "file": "pdf-api-direct.spec.ts",
              "line": 211,
              "column": 7
            },
            {
              "title": "API Direct: Test PDF Generation Performance",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 10,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:255:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 255
                        },
                        "snippet": "  253 |     const duration = endTime - startTime;\n  254 |\n> 255 |     expect(response.status()).toBe(200);\n      |                               ^\n  256 |     expect(duration).toBeLessThan(15000); // Should complete within 15 seconds\n  257 |\n  258 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 255
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  253 |     const duration = endTime - startTime;\n  254 |\n> 255 |     expect(response.status()).toBe(200);\n      |                               ^\n  256 |     expect(duration).toBeLessThan(15000); // Should complete within 15 seconds\n  257 |\n  258 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:255:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF generation performance...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:19.938Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 255
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-2b740d2249bf217581e7",
              "file": "pdf-api-direct.spec.ts",
              "line": 236,
              "column": 7
            },
            {
              "title": "API Direct: Test Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 11,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:275:32",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 32,
                          "line": 275
                        },
                        "snippet": "  273 |     });\n  274 |\n> 275 |     expect(response1.status()).toBe(400);\n      |                                ^\n  276 |     const error1 = await response1.json();\n  277 |     expect(error1.success).toBe(false);\n  278 |     expect(error1.error).toContain('Document type is required');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 32,
                            "line": 275
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  273 |     });\n  274 |\n> 275 |     expect(response1.status()).toBe(400);\n      |                                ^\n  276 |     const error1 = await response1.json();\n  277 |     expect(error1.success).toBe(false);\n  278 |     expect(error1.error).toContain('Document type is required');\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:275:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing API error handling...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:20.275Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 32,
                        "line": 275
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-42e0a18b2794bc88b5da",
              "file": "pdf-api-direct.spec.ts",
              "line": 264,
              "column": 7
            },
            {
              "title": "API Direct: Test Link Delivery Method",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 12,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:323:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 323
                        },
                        "snippet": "  321 |     });\n  322 |\n> 323 |     expect(response.status()).toBe(200);\n      |                               ^\n  324 |     \n  325 |     const data = await response.json();\n  326 |     expect(data.success).toBe(true);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 323
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m404\u001b[39m\n\n  321 |     });\n  322 |\n> 323 |     expect(response.status()).toBe(200);\n      |                               ^\n  324 |     \n  325 |     const data = await response.json();\n  326 |     expect(data.success).toBe(true);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:323:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing link delivery method...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:20.276Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 323
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-bfaca55fa0e88eb12a1d",
              "file": "pdf-api-direct.spec.ts",
              "line": 309,
              "column": 7
            },
            {
              "title": "API Direct: Test PDF Preview Generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 13,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 835,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:348:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 348
                        },
                        "snippet": "  346 |     });\n  347 |\n> 348 |     expect(response.status()).toBe(200);\n      |                               ^\n  349 |     \n  350 |     const data = await response.json();\n  351 |     expect(data.success).toBe(true);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 348
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  346 |     });\n  347 |\n> 348 |     expect(response.status()).toBe(200);\n      |                               ^\n  349 |     \n  350 |     const data = await response.json();\n  351 |     expect(data.success).toBe(true);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:348:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF preview generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:20.300Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 348
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-3d4b7bad69969a2b994d",
              "file": "pdf-api-direct.spec.ts",
              "line": 334,
              "column": 7
            },
            {
              "title": "API Direct: Test Concurrent PDF Generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 14,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 1329,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:395:33)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:394:15",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 33,
                          "line": 395
                        },
                        "snippet": "  393 |     // All requests should succeed\n  394 |     responses.forEach((response, index) => {\n> 395 |       expect(response.status()).toBe(200);\n      |                                 ^\n  396 |     });\n  397 |\n  398 |     expect(duration).toBeLessThan(45000); // Should complete within 45 seconds"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 33,
                            "line": 395
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  393 |     // All requests should succeed\n  394 |     responses.forEach((response, index) => {\n> 395 |       expect(response.status()).toBe(200);\n      |                                 ^\n  396 |     });\n  397 |\n  398 |     expect(duration).toBeLessThan(45000); // Should complete within 45 seconds\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:395:33)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:394:15"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing concurrent PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:20.705Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 33,
                        "line": 395
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-ba7196c0d06ca01bc956",
              "file": "pdf-api-direct.spec.ts",
              "line": 359,
              "column": 7
            },
            {
              "title": "API Direct: Generate Complete Audit Report PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 29,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:122:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 122
                        },
                        "snippet": "  120 |\n  121 |     // Validate response\n> 122 |     expect(response.status()).toBe(200);\n      |                               ^\n  123 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  124 |     expect(response.headers()['content-disposition']).toContain('attachment');\n  125 |     expect(response.headers()['content-disposition']).toContain('api-test-audit-report.pdf');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 122
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  120 |\n  121 |     // Validate response\n> 122 |     expect(response.status()).toBe(200);\n      |                               ^\n  123 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  124 |     expect(response.headers()['content-disposition']).toContain('attachment');\n  125 |     expect(response.headers()['content-disposition']).toContain('api-test-audit-report.pdf');\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:122:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing audit report PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.020Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 122
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-02c8410b4f8d8ce46a41",
              "file": "pdf-api-direct.spec.ts",
              "line": 89,
              "column": 7
            },
            {
              "title": "API Direct: Generate Executive Summary PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 30,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:166:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 166
                        },
                        "snippet": "  164 |     });\n  165 |\n> 166 |     expect(response.status()).toBe(200);\n      |                               ^\n  167 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  168 |\n  169 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 166
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  164 |     });\n  165 |\n> 166 |     expect(response.status()).toBe(200);\n      |                               ^\n  167 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  168 |\n  169 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:166:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing executive summary PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.112Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 166
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-15d05fa32325053892f7",
              "file": "pdf-api-direct.spec.ts",
              "line": 138,
              "column": 7
            },
            {
              "title": "API Direct: Generate SOP Document PDF",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 31,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:201:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 201
                        },
                        "snippet": "  199 |     });\n  200 |\n> 201 |     expect(response.status()).toBe(200);\n      |                               ^\n  202 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  203 |\n  204 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 201
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  199 |     });\n  200 |\n> 201 |     expect(response.status()).toBe(200);\n      |                               ^\n  202 |     expect(response.headers()['content-type']).toBe('application/pdf');\n  203 |\n  204 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:201:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing SOP document PDF generation via direct API...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.158Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 201
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-0baacb523e1bcd098d2d",
              "file": "pdf-api-direct.spec.ts",
              "line": 176,
              "column": 7
            },
            {
              "title": "API Direct: Test Different Page Formats",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 32,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:228:33",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 33,
                          "line": 228
                        },
                        "snippet": "  226 |       });\n  227 |\n> 228 |       expect(response.status()).toBe(200);\n      |                                 ^\n  229 |       const buffer = await response.body();\n  230 |       expect(buffer.length).toBeGreaterThan(1000);\n  231 |       "
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 33,
                            "line": 228
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  226 |       });\n  227 |\n> 228 |       expect(response.status()).toBe(200);\n      |                                 ^\n  229 |       const buffer = await response.body();\n  230 |       expect(buffer.length).toBeGreaterThan(1000);\n  231 |       \n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:228:33"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF generation with different page formats...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.346Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 33,
                        "line": 228
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-174bf1144d12a8a202c8",
              "file": "pdf-api-direct.spec.ts",
              "line": 211,
              "column": 7
            },
            {
              "title": "API Direct: Test PDF Generation Performance",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 33,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 23,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:255:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 255
                        },
                        "snippet": "  253 |     const duration = endTime - startTime;\n  254 |\n> 255 |     expect(response.status()).toBe(200);\n      |                               ^\n  256 |     expect(duration).toBeLessThan(15000); // Should complete within 15 seconds\n  257 |\n  258 |     const buffer = await response.body();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 255
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  253 |     const duration = endTime - startTime;\n  254 |\n> 255 |     expect(response.status()).toBe(200);\n      |                               ^\n  256 |     expect(duration).toBeLessThan(15000); // Should complete within 15 seconds\n  257 |\n  258 |     const buffer = await response.body();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:255:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF generation performance...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.436Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 255
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-dfbcb59a781df91aa61a",
              "file": "pdf-api-direct.spec.ts",
              "line": 236,
              "column": 7
            },
            {
              "title": "API Direct: Test Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 34,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 24,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:275:32",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 32,
                          "line": 275
                        },
                        "snippet": "  273 |     });\n  274 |\n> 275 |     expect(response1.status()).toBe(400);\n      |                                ^\n  276 |     const error1 = await response1.json();\n  277 |     expect(error1.success).toBe(false);\n  278 |     expect(error1.error).toContain('Document type is required');"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 32,
                            "line": 275
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  273 |     });\n  274 |\n> 275 |     expect(response1.status()).toBe(400);\n      |                                ^\n  276 |     const error1 = await response1.json();\n  277 |     expect(error1.success).toBe(false);\n  278 |     expect(error1.error).toContain('Document type is required');\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:275:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing API error handling...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.482Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 32,
                        "line": 275
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-5d5e74bccbbb0e2b4a22",
              "file": "pdf-api-direct.spec.ts",
              "line": 264,
              "column": 7
            },
            {
              "title": "API Direct: Test Link Delivery Method",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 35,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:323:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 323
                        },
                        "snippet": "  321 |     });\n  322 |\n> 323 |     expect(response.status()).toBe(200);\n      |                               ^\n  324 |     \n  325 |     const data = await response.json();\n  326 |     expect(data.success).toBe(true);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 323
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  321 |     });\n  322 |\n> 323 |     expect(response.status()).toBe(200);\n      |                               ^\n  324 |     \n  325 |     const data = await response.json();\n  326 |     expect(data.success).toBe(true);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:323:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing link delivery method...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.668Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 323
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-cff35a2a82f012175b08",
              "file": "pdf-api-direct.spec.ts",
              "line": 309,
              "column": 7
            },
            {
              "title": "API Direct: Test PDF Preview Generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 36,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 26,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:348:31",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 31,
                          "line": 348
                        },
                        "snippet": "  346 |     });\n  347 |\n> 348 |     expect(response.status()).toBe(200);\n      |                               ^\n  349 |     \n  350 |     const data = await response.json();\n  351 |     expect(data.success).toBe(true);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 31,
                            "line": 348
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  346 |     });\n  347 |\n> 348 |     expect(response.status()).toBe(200);\n      |                               ^\n  349 |     \n  350 |     const data = await response.json();\n  351 |     expect(data.success).toBe(true);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:348:31"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing PDF preview generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.759Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 31,
                        "line": 348
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-a6c1701ef3baa65fe39f",
              "file": "pdf-api-direct.spec.ts",
              "line": 334,
              "column": 7
            },
            {
              "title": "API Direct: Test Concurrent PDF Generation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 37,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 29,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:395:33)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:394:15",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                          "column": 33,
                          "line": 395
                        },
                        "snippet": "  393 |     // All requests should succeed\n  394 |     responses.forEach((response, index) => {\n> 395 |       expect(response.status()).toBe(200);\n      |                                 ^\n  396 |     });\n  397 |\n  398 |     expect(duration).toBeLessThan(45000); // Should complete within 45 seconds"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                            "column": 33,
                            "line": 395
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m200\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  393 |     // All requests should succeed\n  394 |     responses.forEach((response, index) => {\n> 395 |       expect(response.status()).toBe(200);\n      |                                 ^\n  396 |     });\n  397 |\n  398 |     expect(duration).toBeLessThan(45000); // Should complete within 45 seconds\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:395:33)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts:394:15"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "Testing concurrent PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:35.807Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-api-direct.spec.ts",
                        "column": 33,
                        "line": 395
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "85a1d8963502c117047b-f10868eaaa8a043e697f",
              "file": "pdf-api-direct.spec.ts",
              "line": 359,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "pdf-generation.spec.ts",
      "file": "pdf-generation.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ProcessAudit AI PDF Generation System",
          "file": "pdf-generation.spec.ts",
          "line": 7,
          "column": 6,
          "specs": [
            {
              "title": "Audit Report PDF Export",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 15,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 12199,
                      "error": {
                        "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================",
                        "stack": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:169:34",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                          "column": 34,
                          "line": 169
                        },
                        "snippet": "  167 |     \n  168 |     // Setup download listener\n> 169 |     const downloadPromise = page.waitForEvent('download', { timeout: PDF_DOWNLOAD_TIMEOUT });\n      |                                  ^\n  170 |     \n  171 |     // Click audit report PDF button\n  172 |     await page.getByTestId('audit-report-pdf-btn').click();"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                            "column": 34,
                            "line": 169
                          },
                          "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n\n  167 |     \n  168 |     // Setup download listener\n> 169 |     const downloadPromise = page.waitForEvent('download', { timeout: PDF_DOWNLOAD_TIMEOUT });\n      |                                  ^\n  170 |     \n  171 |     // Click audit report PDF button\n  172 |     await page.getByTestId('audit-report-pdf-btn').click();\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:169:34"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:20.680Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-0ecfc-tem-Audit-Report-PDF-Export-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-0ecfc-tem-Audit-Report-PDF-Export-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-0ecfc-tem-Audit-Report-PDF-Export-chromium/error-context.md"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                        "column": 34,
                        "line": 169
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-9eaf3bfbc87c20c6451d",
              "file": "pdf-generation.spec.ts",
              "line": 159,
              "column": 7
            },
            {
              "title": "Executive Summary PDF Export",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 16,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 11466,
                      "error": {
                        "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================",
                        "stack": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:201:34",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                          "column": 34,
                          "line": 201
                        },
                        "snippet": "  199 |\n  200 |     // Click Executive Summary PDF export\n> 201 |     const downloadPromise = page.waitForEvent('download', { timeout: PDF_DOWNLOAD_TIMEOUT });\n      |                                  ^\n  202 |     await page.getByTestId('executive-summary-pdf-button').click();\n  203 |     const download = await downloadPromise;\n  204 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                            "column": 34,
                            "line": 201
                          },
                          "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n\n  199 |\n  200 |     // Click Executive Summary PDF export\n> 201 |     const downloadPromise = page.waitForEvent('download', { timeout: PDF_DOWNLOAD_TIMEOUT });\n      |                                  ^\n  202 |     await page.getByTestId('executive-summary-pdf-button').click();\n  203 |     const download = await downloadPromise;\n  204 |\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:201:34"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:21.495Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-6409c-xecutive-Summary-PDF-Export-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-6409c-xecutive-Summary-PDF-Export-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-6409c-xecutive-Summary-PDF-Export-chromium/error-context.md"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                        "column": 34,
                        "line": 201
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-f679cae4e709238a5e00",
              "file": "pdf-generation.spec.ts",
              "line": 193,
              "column": 7
            },
            {
              "title": "SOP Document PDF Export with Fallback",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 17,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 11185,
                      "error": {
                        "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================",
                        "stack": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:230:34",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                          "column": 34,
                          "line": 230
                        },
                        "snippet": "  228 |\n  229 |     // SOP PDF Export with Fallback Handling\n> 230 |     const downloadPromise = page.waitForEvent('download', { \n      |                                  ^\n  231 |       timeout: PDF_DOWNLOAD_TIMEOUT \n  232 |     });\n  233 |"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                            "column": 34,
                            "line": 230
                          },
                          "message": "TimeoutError: page.waitForEvent: Timeout 10000ms exceeded while waiting for event \"download\"\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n\n  228 |\n  229 |     // SOP PDF Export with Fallback Handling\n> 230 |     const downloadPromise = page.waitForEvent('download', { \n      |                                  ^\n  231 |       timeout: PDF_DOWNLOAD_TIMEOUT \n  232 |     });\n  233 |\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:230:34"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:23.084Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-40a00-nt-PDF-Export-with-Fallback-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-40a00-nt-PDF-Export-with-Fallback-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-40a00-nt-PDF-Export-with-Fallback-chromium/error-context.md"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                        "column": 34,
                        "line": 230
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-ce73207dd0947b08a633",
              "file": "pdf-generation.spec.ts",
              "line": 222,
              "column": 7
            },
            {
              "title": "PDF Generation Performance",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 18,
                      "parallelIndex": 2,
                      "status": "timedOut",
                      "duration": 61167,
                      "error": {
                        "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m",
                        "stack": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                      },
                      "errors": [
                        {
                          "message": "\u001b[31mTest timeout of 60000ms exceeded.\u001b[39m"
                        },
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                            "column": 34,
                            "line": 263
                          },
                          "message": "Error: page.waitForEvent: Test timeout of 60000ms exceeded.\n=========================== logs ===========================\nwaiting for event \"download\"\n============================================================\n\n  261 |     await page.waitForSelector('[data-testid=\"audit-report-pdf-btn\"]', { state: 'visible' });\n  262 |     \n> 263 |     const downloadPromise = page.waitForEvent('download');\n      |                                  ^\n  264 |     await page.getByTestId('audit-report-pdf-btn').click();\n  265 |     await downloadPromise;\n  266 |\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:263:34"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:24.003Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-8f214--PDF-Generation-Performance-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-8f214--PDF-Generation-Performance-chromium/video.webm"
                        },
                        {
                          "name": "error-context",
                          "contentType": "text/markdown",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-8f214--PDF-Generation-Performance-chromium/error-context.md"
                        }
                      ]
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-51f0e95a1eb5e86b2cdc",
              "file": "pdf-generation.spec.ts",
              "line": 255,
              "column": 7
            },
            {
              "title": "PDF Generation Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 19,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 132,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:302:29",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                          "column": 29,
                          "line": 302
                        },
                        "snippet": "  300 |\n  301 |     // Should return a 400 error for invalid document type\n> 302 |     expect(response.status).toBe(400);\n      |                             ^\n  303 |     expect(response.success).toBe(false);\n  304 |     expect(response.data.error).toBeDefined();\n  305 |     "
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                            "column": 29,
                            "line": 302
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n\n  300 |\n  301 |     // Should return a 400 error for invalid document type\n> 302 |     expect(response.status).toBe(400);\n      |                             ^\n  303 |     expect(response.success).toBe(false);\n  304 |     expect(response.data.error).toBeDefined();\n  305 |     \n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts:302:29"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:33.324Z",
                      "annotations": [],
                      "attachments": [
                        {
                          "name": "screenshot",
                          "contentType": "image/png",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-a84ec-F-Generation-Error-Handling-chromium/test-failed-1.png"
                        },
                        {
                          "name": "video",
                          "contentType": "video/webm",
                          "path": "/Users/darrenmorgan/AI_Projects/process-audit-ai/test-results/pdf-generation-ProcessAudi-a84ec-F-Generation-Error-Handling-chromium/video.webm"
                        }
                      ],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-generation.spec.ts",
                        "column": 29,
                        "line": 302
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-2085e043d7aa0959c5bc",
              "file": "pdf-generation.spec.ts",
              "line": 277,
              "column": 7
            },
            {
              "title": "Audit Report PDF Export",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 38,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.002Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-1642368551d1ab1c8fe8",
              "file": "pdf-generation.spec.ts",
              "line": 159,
              "column": 7
            },
            {
              "title": "Executive Summary PDF Export",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 39,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.090Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-b48aa5aa24315930f9c9",
              "file": "pdf-generation.spec.ts",
              "line": 193,
              "column": 7
            },
            {
              "title": "SOP Document PDF Export with Fallback",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 40,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.137Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-6514ee459e31cbdb9daa",
              "file": "pdf-generation.spec.ts",
              "line": 222,
              "column": 7
            },
            {
              "title": "PDF Generation Performance",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 41,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.309Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-752224650ca1130ef0fe",
              "file": "pdf-generation.spec.ts",
              "line": 255,
              "column": 7
            },
            {
              "title": "PDF Generation Error Handling",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 42,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 1,
                      "error": {
                        "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝",
                        "stack": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                      },
                      "errors": [
                        {
                          "message": "Error: browserType.launch: Executable doesn't exist at /Users/darrenmorgan/Library/Caches/ms-playwright/webkit-2191/pw_run.sh\n╔═════════════════════════════════════════════════════════════════════════╗\n║ Looks like Playwright Test or Playwright was just installed or updated. ║\n║ Please run the following command to download new browsers:              ║\n║                                                                         ║\n║     npx playwright install                                              ║\n║                                                                         ║\n║ <3 Playwright Team                                                      ║\n╚═════════════════════════════════════════════════════════════════════════╝"
                        }
                      ],
                      "stdout": [],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.398Z",
                      "annotations": [],
                      "attachments": []
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "1fe2c3b4a4a2e863cab7-3daa7db08b34bdea9bec",
              "file": "pdf-generation.spec.ts",
              "line": 277,
              "column": 7
            }
          ]
        }
      ]
    },
    {
      "title": "pdf-validation-simple.spec.ts",
      "file": "pdf-validation-simple.spec.ts",
      "column": 0,
      "line": 0,
      "specs": [],
      "suites": [
        {
          "title": "ProcessAudit AI PDF Generation Validation",
          "file": "pdf-validation-simple.spec.ts",
          "line": 7,
          "column": 6,
          "specs": [
            {
              "title": "Validate PDF Generation API Functionality",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 20,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 23,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:86:32",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 32,
                          "line": 86
                        },
                        "snippet": "  84 |     });\n  85 |\n> 86 |     expect(auditResponse.ok()).toBeTruthy();\n     |                                ^\n  87 |     \n  88 |     const auditPDFBuffer = await auditResponse.body();\n  89 |     expect(auditPDFBuffer.length).toBeGreaterThan(TEST_CONFIG.pdf.minFileSize);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 32,
                            "line": 86
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  84 |     });\n  85 |\n> 86 |     expect(auditResponse.ok()).toBeTruthy();\n     |                                ^\n  87 |     \n  88 |     const auditPDFBuffer = await auditResponse.body();\n  89 |     expect(auditPDFBuffer.length).toBeGreaterThan(TEST_CONFIG.pdf.minFileSize);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:86:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🚀 Starting PDF generation validation...\n"
                        },
                        {
                          "text": "📄 Testing Audit Report PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:33.367Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 32,
                        "line": 86
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-949ee60e00dcd7332da9",
              "file": "pdf-validation-simple.spec.ts",
              "line": 9,
              "column": 7
            },
            {
              "title": "PDF Error Handling Validation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 21,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 26,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:197:38",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 38,
                          "line": 197
                        },
                        "snippet": "  195 |\n  196 |     expect(invalidResponse.ok()).toBeFalsy();\n> 197 |     expect(invalidResponse.status()).toBe(400);\n      |                                      ^\n  198 |     \n  199 |     const errorResponse = await invalidResponse.json();\n  200 |     expect(errorResponse.success).toBe(false);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 38,
                            "line": 197
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  195 |\n  196 |     expect(invalidResponse.ok()).toBeFalsy();\n> 197 |     expect(invalidResponse.status()).toBe(400);\n      |                                      ^\n  198 |     \n  199 |     const errorResponse = await invalidResponse.json();\n  200 |     expect(errorResponse.success).toBe(false);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:197:38"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔧 Testing PDF error handling...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:33.699Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 38,
                        "line": 197
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-b9ace01514a24f19c97d",
              "file": "pdf-validation-simple.spec.ts",
              "line": 181,
              "column": 7
            },
            {
              "title": "PDF Generation Concurrent Requests",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "chromium",
                  "projectName": "chromium",
                  "results": [
                    {
                      "workerIndex": 22,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:242:29)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:241:15",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 29,
                          "line": 242
                        },
                        "snippet": "  240 |     // Validate all responses\n  241 |     responses.forEach((response, index) => {\n> 242 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  243 |     });\n  244 |\n  245 |     console.log(`✅ Concurrent generation: 3 PDFs in ${totalTime}ms`);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 29,
                            "line": 242
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  240 |     // Validate all responses\n  241 |     responses.forEach((response, index) => {\n> 242 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  243 |     });\n  244 |\n  245 |     console.log(`✅ Concurrent generation: 3 PDFs in ${totalTime}ms`);\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:242:29)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:241:15"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "⚡ Testing concurrent PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:33.874Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 29,
                        "line": 242
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-dc7d1a957aac536b6c6b",
              "file": "pdf-validation-simple.spec.ts",
              "line": 206,
              "column": 7
            },
            {
              "title": "Validate PDF Generation API Functionality",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 43,
                      "parallelIndex": 3,
                      "status": "failed",
                      "duration": 23,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:86:32",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 32,
                          "line": 86
                        },
                        "snippet": "  84 |     });\n  85 |\n> 86 |     expect(auditResponse.ok()).toBeTruthy();\n     |                                ^\n  87 |     \n  88 |     const auditPDFBuffer = await auditResponse.body();\n  89 |     expect(auditPDFBuffer.length).toBeGreaterThan(TEST_CONFIG.pdf.minFileSize);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 32,
                            "line": 86
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  84 |     });\n  85 |\n> 86 |     expect(auditResponse.ok()).toBeTruthy();\n     |                                ^\n  87 |     \n  88 |     const auditPDFBuffer = await auditResponse.body();\n  89 |     expect(auditPDFBuffer.length).toBeGreaterThan(TEST_CONFIG.pdf.minFileSize);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:86:32"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🚀 Starting PDF generation validation...\n"
                        },
                        {
                          "text": "📄 Testing Audit Report PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.443Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 32,
                        "line": 86
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-51be9c111a43b43f8e87",
              "file": "pdf-validation-simple.spec.ts",
              "line": 9,
              "column": 7
            },
            {
              "title": "PDF Error Handling Validation",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 44,
                      "parallelIndex": 5,
                      "status": "failed",
                      "duration": 25,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:197:38",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 38,
                          "line": 197
                        },
                        "snippet": "  195 |\n  196 |     expect(invalidResponse.ok()).toBeFalsy();\n> 197 |     expect(invalidResponse.status()).toBe(400);\n      |                                      ^\n  198 |     \n  199 |     const errorResponse = await invalidResponse.json();\n  200 |     expect(errorResponse.success).toBe(false);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 38,
                            "line": 197
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32m400\u001b[39m\nReceived: \u001b[31m500\u001b[39m\n\n  195 |\n  196 |     expect(invalidResponse.ok()).toBeFalsy();\n> 197 |     expect(invalidResponse.status()).toBe(400);\n      |                                      ^\n  198 |     \n  199 |     const errorResponse = await invalidResponse.json();\n  200 |     expect(errorResponse.success).toBe(false);\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:197:38"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "🔧 Testing PDF error handling...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.613Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 38,
                        "line": 197
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-119b4edaa2d4cb97bc2e",
              "file": "pdf-validation-simple.spec.ts",
              "line": 181,
              "column": 7
            },
            {
              "title": "PDF Generation Concurrent Requests",
              "ok": false,
              "tags": [],
              "tests": [
                {
                  "timeout": 60000,
                  "annotations": [],
                  "expectedStatus": "passed",
                  "projectId": "webkit",
                  "projectName": "webkit",
                  "results": [
                    {
                      "workerIndex": 45,
                      "parallelIndex": 0,
                      "status": "failed",
                      "duration": 28,
                      "error": {
                        "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m",
                        "stack": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:242:29)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:241:15",
                        "location": {
                          "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                          "column": 29,
                          "line": 242
                        },
                        "snippet": "  240 |     // Validate all responses\n  241 |     responses.forEach((response, index) => {\n> 242 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  243 |     });\n  244 |\n  245 |     console.log(`✅ Concurrent generation: 3 PDFs in ${totalTime}ms`);"
                      },
                      "errors": [
                        {
                          "location": {
                            "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                            "column": 29,
                            "line": 242
                          },
                          "message": "Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n\n  240 |     // Validate all responses\n  241 |     responses.forEach((response, index) => {\n> 242 |       expect(response.ok()).toBeTruthy();\n      |                             ^\n  243 |     });\n  244 |\n  245 |     console.log(`✅ Concurrent generation: 3 PDFs in ${totalTime}ms`);\n    at forEach (/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:242:29)\n    at /Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts:241:15"
                        }
                      ],
                      "stdout": [
                        {
                          "text": "⚡ Testing concurrent PDF generation...\n"
                        }
                      ],
                      "stderr": [],
                      "retry": 0,
                      "startTime": "2025-09-10T22:30:36.709Z",
                      "annotations": [],
                      "attachments": [],
                      "errorLocation": {
                        "file": "/Users/darrenmorgan/AI_Projects/process-audit-ai/tests/e2e/pdf-validation-simple.spec.ts",
                        "column": 29,
                        "line": 242
                      }
                    }
                  ],
                  "status": "unexpected"
                }
              ],
              "id": "2fd0d3273ca3555194f7-c4dace35a1d217810cf3",
              "file": "pdf-validation-simple.spec.ts",
              "line": 206,
              "column": 7
            }
          ]
        }
      ]
    }
  ],
  "errors": [],
  "stats": {
    "startTime": "2025-09-10T22:30:07.412Z",
    "duration": 77899.98,
    "expected": 0,
    "skipped": 0,
    "unexpected": 46,
    "flaky": 0
  }
}