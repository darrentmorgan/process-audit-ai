{
  "version": 3,
  "sources": ["../bundle-kJXm6e/checked-fetch.js", "../bundle-kJXm6e/middleware-loader.entry.ts", "wrangler-modules-watch:wrangler:modules-watch", "../bundle-kJXm6e/middleware-insertion-facade.js", "../../../src/index.js", "../../../src/processor.js", "../../../src/generators/n8n.js", "../../../src/ai/claude.js", "../../../src/database.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/.wrangler/tmp/dev-WOisEq",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/.wrangler/tmp/bundle-kJXm6e/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/.wrangler/tmp/bundle-kJXm6e/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/.wrangler/tmp/bundle-kJXm6e/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/darrenmorgan/AI_Projects/process-audit-ai/workers/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "/**\n * Cloudflare Worker for Processing Automation Jobs\n * Handles long-running automation generation tasks\n */\n\nimport { processAutomationJob } from './processor';\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    \n    // CORS headers\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    };\n\n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, { headers: corsHeaders });\n    }\n\n    // Health check endpoint\n    if (url.pathname === '/health') {\n      return new Response(JSON.stringify({ status: 'healthy' }), {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n      });\n    }\n\n    // Get job status endpoint\n    if (url.pathname.startsWith('/status/')) {\n      const jobId = url.pathname.split('/')[2];\n      \n      try {\n        const status = await getJobStatus(env, jobId);\n        return new Response(JSON.stringify(status), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ error: error.message }), {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      }\n    }\n\n    // Submit job endpoint\n    if (url.pathname === '/submit' && request.method === 'POST') {\n      try {\n        const job = await request.json();\n        \n        // Add job to queue\n        await env.AUTOMATION_QUEUE.send(job);\n        \n        // Return job ID for status polling\n        return new Response(JSON.stringify({ \n          jobId: job.id,\n          status: 'queued' \n        }), {\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ error: error.message }), {\n          status: 500,\n          headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        });\n      }\n    }\n\n    return new Response('Not Found', { status: 404 });\n  },\n\n  // Queue consumer for processing automation jobs\n  async queue(batch, env) {\n    for (const message of batch.messages) {\n      try {\n        const job = message.body;\n        console.log(`Processing job: ${job.id}`);\n        \n        // Process the automation job\n        await processAutomationJob(env, job);\n        \n        // Acknowledge message\n        message.ack();\n      } catch (error) {\n        console.error(`Error processing job: ${error.message}`);\n        // Retry the message\n        message.retry();\n      }\n    }\n  }\n};\n\nasync function getJobStatus(env, jobId) {\n  const response = await fetch(`${env.SUPABASE_URL}/rest/v1/automation_jobs?id=eq.${jobId}`, {\n    headers: {\n      'apikey': env.SUPABASE_SERVICE_KEY,\n      'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch job status');\n  }\n\n  const jobs = await response.json();\n  if (jobs.length === 0) {\n    throw new Error('Job not found');\n  }\n\n  return jobs[0];\n}", "/**\n * Job Processor for Automation Generation\n * Handles the orchestration and generation of n8n workflows\n */\n\nimport { generateN8nWorkflow } from './generators/n8n';\nimport { updateJobProgress, saveAutomation } from './database';\nimport { callClaudeAPI } from './ai/claude';\n\nexport async function processAutomationJob(env, job) {\n  try {\n    // Update job status to processing\n    await updateJobProgress(env, job.id, 10, 'processing');\n\n    // Step 1: Analyze the process and create orchestration plan\n    console.log('Creating orchestration plan...');\n    const orchestrationPlan = await createOrchestrationPlan(env, job);\n    await updateJobProgress(env, job.id, 30, 'processing');\n\n    // Step 2: Generate platform-specific workflow (n8n for now)\n    console.log('Generating n8n workflow...');\n    const workflow = await generateN8nWorkflow(env, orchestrationPlan, job);\n    await updateJobProgress(env, job.id, 70, 'processing');\n\n    // Step 3: Save the generated automation\n    console.log('Saving automation...');\n    const automation = {\n      name: workflow.name,\n      description: workflow.description,\n      platform: 'n8n',\n      workflow_json: workflow,\n      instructions: generateInstructions(workflow),\n    };\n    \n    await saveAutomation(env, job.id, automation);\n    await updateJobProgress(env, job.id, 100, 'completed');\n\n    console.log(`Job ${job.id} completed successfully`);\n    return automation;\n\n  } catch (error) {\n    console.error(`Error processing job ${job.id}:`, error);\n    await updateJobProgress(env, job.id, 0, 'failed', error.message);\n    throw error;\n  }\n}\n\nasync function createOrchestrationPlan(env, job) {\n  const prompt = `\nYou are an automation orchestration expert. Based on the following business process analysis, create a detailed automation plan that can be implemented in n8n.\n\nProcess Analysis:\n${JSON.stringify(job.processData, null, 2)}\n\nAutomation Opportunities:\n${JSON.stringify(job.automationOpportunities, null, 2)}\n\nCreate a structured plan with:\n1. Workflow triggers (webhooks, schedules, etc.)\n2. Data collection steps\n3. Processing/transformation steps\n4. Integration points with external systems\n5. Error handling approach\n6. Output/notification steps\n\nReturn a JSON object with this structure:\n{\n  \"workflowName\": \"string\",\n  \"description\": \"string\",\n  \"triggers\": [\n    {\n      \"type\": \"webhook|schedule|email|form\",\n      \"configuration\": {}\n    }\n  ],\n  \"steps\": [\n    {\n      \"id\": \"string\",\n      \"name\": \"string\",\n      \"type\": \"string\",\n      \"description\": \"string\",\n      \"inputs\": [],\n      \"outputs\": [],\n      \"configuration\": {}\n    }\n  ],\n  \"connections\": [\n    {\n      \"from\": \"stepId\",\n      \"to\": \"stepId\"\n    }\n  ],\n  \"errorHandling\": {\n    \"strategy\": \"string\",\n    \"notifications\": []\n  }\n}\n`;\n\n  const response = await callClaudeAPI(env, prompt);\n  return JSON.parse(response);\n}\n\nfunction generateInstructions(workflow) {\n  const instructions = [];\n  \n  instructions.push('## How to Import This Workflow in n8n\\n');\n  instructions.push('1. Open your n8n instance');\n  instructions.push('2. Click on \"Workflows\" in the left sidebar');\n  instructions.push('3. Click the \"Import\" button');\n  instructions.push('4. Select \"From File\" and upload the downloaded JSON file');\n  instructions.push('5. Review and activate the workflow\\n');\n  \n  instructions.push('## Configuration Required\\n');\n  instructions.push('After importing, you will need to:');\n  \n  // Add specific configuration steps based on workflow nodes\n  if (workflow.nodes) {\n    const uniqueTypes = [...new Set(workflow.nodes.map(n => n.type))];\n    uniqueTypes.forEach(type => {\n      if (type.includes('webhook')) {\n        instructions.push('- Configure webhook URL and authentication');\n      }\n      if (type.includes('email')) {\n        instructions.push('- Set up email credentials');\n      }\n      if (type.includes('database')) {\n        instructions.push('- Configure database connection');\n      }\n      if (type.includes('api')) {\n        instructions.push('- Add API keys and endpoints');\n      }\n    });\n  }\n  \n  instructions.push('\\n## Testing\\n');\n  instructions.push('1. Use the \"Execute Workflow\" button to test');\n  instructions.push('2. Check the execution log for any errors');\n  instructions.push('3. Adjust node settings as needed');\n  \n  return instructions.join('\\n');\n}", "/**\n * n8n Workflow Generator\n * Creates n8n-compatible JSON workflow definitions\n */\n\nimport { callClaudeAPI } from '../ai/claude';\n\nexport async function generateN8nWorkflow(env, orchestrationPlan, job) {\n  // Generate detailed n8n workflow using AI\n  const prompt = `\nYou are an n8n workflow expert. Convert the following orchestration plan into a valid n8n workflow JSON.\n\nOrchestration Plan:\n${JSON.stringify(orchestrationPlan, null, 2)}\n\nBusiness Context:\n${JSON.stringify(job.processData, null, 2)}\n\nGenerate a complete n8n workflow JSON that includes:\n1. All necessary nodes with proper configuration\n2. Connections between nodes\n3. Error handling nodes where appropriate\n4. Proper node positioning for visual clarity\n\nUse these common n8n node types as appropriate:\n- n8n-nodes-base.webhook (for webhook triggers)\n- n8n-nodes-base.schedule (for scheduled triggers)\n- n8n-nodes-base.httpRequest (for API calls)\n- n8n-nodes-base.set (for data transformation)\n- n8n-nodes-base.if (for conditional logic)\n- n8n-nodes-base.emailSend (for notifications)\n- n8n-nodes-base.postgres/mysql (for database operations)\n- n8n-nodes-base.function (for custom JavaScript)\n- n8n-nodes-base.merge (for combining data)\n- n8n-nodes-base.splitInBatches (for batch processing)\n\nReturn a valid n8n workflow JSON with this structure:\n{\n  \"name\": \"Workflow Name\",\n  \"nodes\": [\n    {\n      \"parameters\": {},\n      \"id\": \"unique-id\",\n      \"name\": \"Node Name\",\n      \"type\": \"n8n-nodes-base.webhook\",\n      \"typeVersion\": 1,\n      \"position\": [250, 300],\n      \"webhookId\": \"unique-webhook-id\" (if webhook)\n    }\n  ],\n  \"connections\": {\n    \"Node Name\": {\n      \"main\": [\n        [\n          {\n            \"node\": \"Next Node Name\",\n            \"type\": \"main\",\n            \"index\": 0\n          }\n        ]\n      ]\n    }\n  },\n  \"active\": false,\n  \"settings\": {},\n  \"versionId\": \"1\",\n  \"id\": \"${job.id}\",\n  \"meta\": {\n    \"instanceId\": \"process-audit-ai\"\n  },\n  \"tags\": []\n}\n\nImportant: Generate real, functional node configurations based on the process requirements.\n`;\n\n  const response = await callClaudeAPI(env, prompt, 8192);\n  const workflow = JSON.parse(response);\n  \n  // Ensure workflow has required fields\n  if (!workflow.name) {\n    workflow.name = orchestrationPlan.workflowName || 'Generated Automation Workflow';\n  }\n  \n  if (!workflow.nodes || workflow.nodes.length === 0) {\n    // Create a basic workflow structure if AI didn't generate nodes\n    workflow.nodes = createBasicNodes(orchestrationPlan);\n  }\n  \n  if (!workflow.connections) {\n    workflow.connections = createNodeConnections(workflow.nodes);\n  }\n\n  // Add metadata\n  workflow.meta = {\n    ...workflow.meta,\n    generatedAt: new Date().toISOString(),\n    generatedBy: 'ProcessAudit AI',\n  };\n  \n  workflow.tags = ['automated', 'process-audit-ai'];\n  \n  return workflow;\n}\n\nfunction createBasicNodes(plan) {\n  const nodes = [];\n  let yPosition = 250;\n  \n  // Create trigger node\n  if (plan.triggers && plan.triggers.length > 0) {\n    const trigger = plan.triggers[0];\n    nodes.push({\n      id: generateNodeId(),\n      name: 'Trigger',\n      type: mapTriggerType(trigger.type),\n      typeVersion: 1,\n      position: [250, yPosition],\n      parameters: trigger.configuration || {},\n    });\n    yPosition += 150;\n  }\n  \n  // Create step nodes\n  if (plan.steps) {\n    plan.steps.forEach((step, index) => {\n      nodes.push({\n        id: step.id || generateNodeId(),\n        name: step.name || `Step ${index + 1}`,\n        type: mapStepType(step.type),\n        typeVersion: 1,\n        position: [250, yPosition],\n        parameters: step.configuration || {},\n      });\n      yPosition += 150;\n    });\n  }\n  \n  return nodes;\n}\n\nfunction mapTriggerType(type) {\n  const typeMap = {\n    'webhook': 'n8n-nodes-base.webhook',\n    'schedule': 'n8n-nodes-base.schedule',\n    'email': 'n8n-nodes-base.emailReadImap',\n    'form': 'n8n-nodes-base.formTrigger',\n  };\n  return typeMap[type] || 'n8n-nodes-base.webhook';\n}\n\nfunction mapStepType(type) {\n  const typeMap = {\n    'http': 'n8n-nodes-base.httpRequest',\n    'transform': 'n8n-nodes-base.set',\n    'condition': 'n8n-nodes-base.if',\n    'email': 'n8n-nodes-base.emailSend',\n    'database': 'n8n-nodes-base.postgres',\n    'function': 'n8n-nodes-base.function',\n    'merge': 'n8n-nodes-base.merge',\n    'split': 'n8n-nodes-base.splitInBatches',\n  };\n  return typeMap[type] || 'n8n-nodes-base.set';\n}\n\nfunction createNodeConnections(nodes) {\n  const connections = {};\n  \n  for (let i = 0; i < nodes.length - 1; i++) {\n    const currentNode = nodes[i];\n    const nextNode = nodes[i + 1];\n    \n    connections[currentNode.name] = {\n      main: [[{\n        node: nextNode.name,\n        type: 'main',\n        index: 0,\n      }]],\n    };\n  }\n  \n  return connections;\n}\n\nfunction generateNodeId() {\n  return 'node_' + Math.random().toString(36).substr(2, 9);\n}", "/**\n * Claude API integration for AI-powered automation generation\n */\n\nexport async function callClaudeAPI(env, prompt, maxTokens = 4096) {\n  const response = await fetch('https://api.anthropic.com/v1/messages', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'x-api-key': env.CLAUDE_API_KEY,\n      'anthropic-version': '2023-06-01',\n    },\n    body: JSON.stringify({\n      model: 'claude-3-sonnet-20240229',\n      max_tokens: maxTokens,\n      messages: [\n        {\n          role: 'user',\n          content: prompt,\n        },\n      ],\n      temperature: 0.2, // Lower temperature for more consistent JSON generation\n    }),\n  });\n\n  if (!response.ok) {\n    const error = await response.text();\n    throw new Error(`Claude API error: ${error}`);\n  }\n\n  const data = await response.json();\n  \n  // Extract JSON from the response\n  const content = data.content[0].text;\n  \n  // Try to parse JSON from the response\n  try {\n    // Look for JSON blocks in the response\n    const jsonMatch = content.match(/```json\\n?([\\s\\S]*?)\\n?```/);\n    if (jsonMatch) {\n      return jsonMatch[1].trim();\n    }\n    \n    // Try to parse the entire response as JSON\n    JSON.parse(content);\n    return content;\n  } catch (e) {\n    // If not valid JSON, try to extract JSON object\n    const jsonStart = content.indexOf('{');\n    const jsonEnd = content.lastIndexOf('}') + 1;\n    \n    if (jsonStart !== -1 && jsonEnd > jsonStart) {\n      const jsonStr = content.substring(jsonStart, jsonEnd);\n      JSON.parse(jsonStr); // Validate it's valid JSON\n      return jsonStr;\n    }\n    \n    throw new Error('Failed to extract valid JSON from Claude response');\n  }\n}", "/**\n * Database operations for Supabase\n */\n\nexport async function updateJobProgress(env, jobId, progress, status, errorMessage = null) {\n  const updateData = {\n    progress,\n    status,\n    updated_at: new Date().toISOString(),\n  };\n\n  if (errorMessage) {\n    updateData.error_message = errorMessage;\n  }\n\n  const response = await fetch(\n    `${env.SUPABASE_URL}/rest/v1/automation_jobs?id=eq.${jobId}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n        'Content-Type': 'application/json',\n        'Prefer': 'return=minimal',\n      },\n      body: JSON.stringify(updateData),\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(`Failed to update job progress: ${response.statusText}`);\n  }\n\n  console.log(`Updated job ${jobId}: ${status} - ${progress}%`);\n}\n\nexport async function saveAutomation(env, jobId, automation) {\n  const automationData = {\n    job_id: jobId,\n    name: automation.name,\n    description: automation.description,\n    platform: automation.platform,\n    workflow_json: automation.workflow_json,\n    instructions: automation.instructions,\n    created_at: new Date().toISOString(),\n  };\n\n  const response = await fetch(\n    `${env.SUPABASE_URL}/rest/v1/generated_automations`,\n    {\n      method: 'POST',\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n        'Content-Type': 'application/json',\n        'Prefer': 'return=minimal',\n      },\n      body: JSON.stringify(automationData),\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(`Failed to save automation: ${response.statusText}`);\n  }\n\n  // Also update the job with the workflow data\n  await fetch(\n    `${env.SUPABASE_URL}/rest/v1/automation_jobs?id=eq.${jobId}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n        'Content-Type': 'application/json',\n        'Prefer': 'return=minimal',\n      },\n      body: JSON.stringify({\n        workflow_data: automation.workflow_json,\n        updated_at: new Date().toISOString(),\n      }),\n    }\n  );\n\n  console.log(`Saved automation for job ${jobId}`);\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch", "import_checked_fetch"]
}
