/**
 * AuditReportPDF Component - ProcessAudit AI
 * 
 * PDF version of the audit report matching the web UI structure
 * Includes Executive Summary, Opportunities, Implementation, and Guidance sections
 */

import React from 'react'
import { Text, View, Page } from '@react-pdf/renderer'
import BasePDFDocument, {
  PDFTitle,
  PDFHeading1,
  PDFHeading2,
  PDFHeading3,
  PDFText,
  PDFSection,
  PDFCard,
  PDFRow,
  PDFColumn,
  PDFList,
  PDFTable,
  PDFStatusBadge,
  pdfStyles
} from './BasePDFDocument'

/**
 * Audit Report PDF Component
 * Generates a comprehensive PDF report from audit data
 */
const AuditReportPDF = ({ 
  reportData,
  processData = {},
  branding = {},
  options = {}
}) => {
  if (!reportData) {
    return null
  }

  const {
    executiveSummary = {},
    automationOpportunities = [],
    roadmap = {},
    implementationGuidance = {}
  } = reportData

  return (
    <BasePDFDocument
      title="Business Process Audit Report"
      metadata={{
        title: processData.processName ? `Audit Report: ${processData.processName}` : 'Business Process Audit Report',
        author: branding.companyName || 'ProcessAudit AI',
        subject: 'Business Process Analysis and Automation Opportunities',
        keywords: ['process audit', 'automation', 'business analysis', processData.industry],
        createdDate: new Date()
      }}
      branding={branding}
      showHeader={options.showHeader !== false}
      showFooter={options.showFooter !== false}
      pageNumbers={options.pageNumbers !== false}
    >
      {/* Cover Page */}
      {options.showCoverPage !== false && (
        <CoverPage 
          processData={processData} 
          branding={branding}
          reportData={reportData}
        />
      )}

      {/* Executive Summary */}
      <ExecutiveSummarySection 
        executiveSummary={executiveSummary}
        processData={processData}
      />

      {/* Process Analysis Overview */}
      <ProcessAnalysisSection 
        processData={processData}
        reportData={reportData}
      />

      {/* Automation Opportunities */}
      <AutomationOpportunitiesSection 
        opportunities={automationOpportunities}
      />

      {/* Implementation Roadmap */}
      <ImplementationRoadmapSection 
        roadmap={roadmap}
      />

      {/* Implementation Guidance */}
      <ImplementationGuidanceSection 
        guidance={implementationGuidance}
      />
    </BasePDFDocument>
  )
}

/**
 * Cover Page Component
 */
const CoverPage = ({ processData, branding, reportData }) => (
  <Page size="A4" style={pdfStyles.page}>
    <View style={{ 
      flex: 1, 
      justifyContent: 'center', 
      alignItems: 'center',
      paddingHorizontal: 60
    }}>
      <PDFTitle style={{ fontSize: 28, marginBottom: 30, textAlign: 'center' }}>
        Business Process Audit Report
      </PDFTitle>
      
      {processData.processName && (
        <PDFHeading1 style={{ 
          fontSize: 20, 
          textAlign: 'center', 
          marginBottom: 40,
          borderBottom: 'none',
          color: '#2563eb'
        }}>
          {processData.processName}
        </PDFHeading1>
      )}
      
      <View style={{ 
        backgroundColor: '#f8fafc', 
        padding: 30,
        borderRadius: 8,
        border: '1pt solid #e2e8f0',
        width: '100%',
        marginBottom: 40
      }}>
        <PDFRow>
          <PDFColumn>
            <PDFText style={{ fontWeight: 'bold' }}>Industry:</PDFText>
            <PDFText>{processData.industry || 'Not specified'}</PDFText>
          </PDFColumn>
          <PDFColumn>
            <PDFText style={{ fontWeight: 'bold' }}>Department:</PDFText>
            <PDFText>{processData.department || 'Not specified'}</PDFText>
          </PDFColumn>
        </PDFRow>
        
        <View style={{ marginTop: 15 }}>
          <PDFText style={{ fontWeight: 'bold' }}>Process Owner:</PDFText>
          <PDFText>{processData.processOwner || 'Not specified'}</PDFText>
        </View>
        
        <View style={{ marginTop: 15 }}>
          <PDFText style={{ fontWeight: 'bold' }}>Analysis Date:</PDFText>
          <PDFText>{new Date().toLocaleDateString()}</PDFText>
        </View>
      </View>
      
      <View style={{ textAlign: 'center' }}>
        <PDFText style={{ fontSize: 14, fontWeight: 'bold', marginBottom: 10 }}>
          Generated by {branding.companyName || 'ProcessAudit AI'}
        </PDFText>
        <PDFText small>
          AI-Powered Business Process Analysis
        </PDFText>
      </View>
    </View>
  </Page>
)

/**
 * Executive Summary Section
 */
const ExecutiveSummarySection = ({ executiveSummary, processData }) => (
  <>
    <View style={pdfStyles.pageBreak}>
      <PDFHeading1>Executive Summary</PDFHeading1>
      
      {executiveSummary.overview && (
        <PDFSection>
          <PDFText>{executiveSummary.overview}</PDFText>
        </PDFSection>
      )}
      
      <PDFSection>
        <PDFHeading2>Key Findings</PDFHeading2>
        
        <PDFRow>
          <PDFColumn>
            <PDFCard>
              <PDFHeading3 style={{ color: '#2563eb', fontSize: 12, marginBottom: 8 }}>
                Automation Potential
              </PDFHeading3>
              <PDFText style={{ fontSize: 20, fontWeight: 'bold', color: '#2563eb' }}>
                {executiveSummary.automationScore || 'N/A'}%
              </PDFText>
            </PDFCard>
          </PDFColumn>
          
          <PDFColumn>
            <PDFCard>
              <PDFHeading3 style={{ color: '#16a34a', fontSize: 12, marginBottom: 8 }}>
                Potential ROI
              </PDFHeading3>
              <PDFText style={{ fontSize: 20, fontWeight: 'bold', color: '#16a34a' }}>
                {executiveSummary.estimatedROI || 'TBD'}
              </PDFText>
            </PDFCard>
          </PDFColumn>
        </PDFRow>
        
        <PDFRow>
          <PDFColumn>
            <PDFCard>
              <PDFHeading3 style={{ color: '#dc2626', fontSize: 12, marginBottom: 8 }}>
                Time Savings
              </PDFHeading3>
              <PDFText style={{ fontSize: 20, fontWeight: 'bold', color: '#dc2626' }}>
                {executiveSummary.timeSavings || 'TBD'}
              </PDFText>
            </PDFCard>
          </PDFColumn>
          
          <PDFColumn>
            <PDFCard>
              <PDFHeading3 style={{ color: '#7c3aed', fontSize: 12, marginBottom: 8 }}>
                Complexity Score
              </PDFHeading3>
              <PDFText style={{ fontSize: 20, fontWeight: 'bold', color: '#7c3aed' }}>
                {executiveSummary.complexityScore || 'N/A'}/10
              </PDFText>
            </PDFCard>
          </PDFColumn>
        </PDFRow>
      </PDFSection>
    </View>
  </>
)

/**
 * Process Analysis Section
 */
const ProcessAnalysisSection = ({ processData, reportData }) => (
  <View style={pdfStyles.pageBreak}>
    <PDFHeading1>Process Analysis</PDFHeading1>
    
    <PDFSection>
      <PDFHeading2>Process Overview</PDFHeading2>
      
      {processData.description && (
        <PDFSection>
          <PDFText>{processData.description}</PDFText>
        </PDFSection>
      )}
      
      <PDFTable
        headers={['Attribute', 'Value']}
        rows={[
          ['Process Name', processData.processName || 'Not specified'],
          ['Industry', processData.industry || 'Not specified'],
          ['Department', processData.department || 'Not specified'],
          ['Current Volume', processData.currentVolume || 'Not specified'],
          ['Frequency', processData.frequency || 'Not specified'],
          ['Process Owner', processData.processOwner || 'Not specified']
        ]}
      />
    </PDFSection>

    <PDFSection>
      <PDFHeading2>Current State Analysis</PDFHeading2>
      
      {reportData.currentState && (
        <PDFText>{reportData.currentState}</PDFText>
      )}
      
      {reportData.painPoints && (
        <>
          <PDFHeading3>Identified Pain Points</PDFHeading3>
          <PDFList items={reportData.painPoints} />
        </>
      )}
      
      {reportData.inefficiencies && (
        <>
          <PDFHeading3>Process Inefficiencies</PDFHeading3>
          <PDFList items={reportData.inefficiencies} />
        </>
      )}
    </PDFSection>
  </View>
)

/**
 * Automation Opportunities Section
 */
const AutomationOpportunitiesSection = ({ opportunities = [] }) => (
  <View style={pdfStyles.pageBreak}>
    <PDFHeading1>Automation Opportunities</PDFHeading1>
    
    {opportunities.length === 0 && (
      <PDFText>No specific automation opportunities identified in this analysis.</PDFText>
    )}
    
    {opportunities.map((opportunity, index) => (
      <PDFSection key={index}>
        <View style={{ 
          flexDirection: 'row', 
          alignItems: 'center', 
          marginBottom: 10 
        }}>
          <PDFHeading2 style={{ flex: 1, marginBottom: 0 }}>
            {opportunity.title || `Opportunity ${index + 1}`}
          </PDFHeading2>
          
          {opportunity.priority && (
            <PDFStatusBadge 
              status={opportunity.priority.toUpperCase()}
              priority={opportunity.priority.toLowerCase()}
            />
          )}
        </View>
        
        {opportunity.description && (
          <PDFText style={{ marginBottom: 10 }}>
            {opportunity.description}
          </PDFText>
        )}
        
        <PDFRow>
          <PDFColumn>
            <PDFCard style={{ marginRight: 5 }}>
              <PDFText style={{ fontWeight: 'bold', marginBottom: 5 }}>
                Impact
              </PDFText>
              <PDFText small>{opportunity.impact || 'Not specified'}</PDFText>
            </PDFCard>
          </PDFColumn>
          
          <PDFColumn>
            <PDFCard style={{ marginLeft: 5 }}>
              <PDFText style={{ fontWeight: 'bold', marginBottom: 5 }}>
                Effort
              </PDFText>
              <PDFText small>{opportunity.effort || 'Not specified'}</PDFText>
            </PDFCard>
          </PDFColumn>
        </PDFRow>
        
        {opportunity.steps && opportunity.steps.length > 0 && (
          <>
            <PDFHeading3>Implementation Steps</PDFHeading3>
            <PDFList items={opportunity.steps} />
          </>
        )}
        
        {opportunity.benefits && opportunity.benefits.length > 0 && (
          <>
            <PDFHeading3>Expected Benefits</PDFHeading3>
            <PDFList items={opportunity.benefits} />
          </>
        )}
        
        {opportunity.risks && opportunity.risks.length > 0 && (
          <>
            <PDFHeading3>Risks & Considerations</PDFHeading3>
            <PDFList items={opportunity.risks} />
          </>
        )}
      </PDFSection>
    ))}
  </View>
)

/**
 * Implementation Roadmap Section
 */
const ImplementationRoadmapSection = ({ roadmap }) => (
  <View style={pdfStyles.pageBreak}>
    <PDFHeading1>Implementation Roadmap</PDFHeading1>
    
    {roadmap.overview && (
      <PDFSection>
        <PDFText>{roadmap.overview}</PDFText>
      </PDFSection>
    )}
    
    {roadmap.phases && roadmap.phases.length > 0 && (
      <PDFSection>
        <PDFHeading2>Implementation Phases</PDFHeading2>
        
        {roadmap.phases.map((phase, index) => (
          <PDFCard key={index} style={{ marginBottom: 15 }}>
            <PDFHeading3 style={{ color: '#2563eb', marginBottom: 8 }}>
              Phase {index + 1}: {phase.name || `Phase ${index + 1}`}
            </PDFHeading3>
            
            {phase.description && (
              <PDFText style={{ marginBottom: 8 }}>
                {phase.description}
              </PDFText>
            )}
            
            <PDFRow>
              <PDFColumn>
                <PDFText style={{ fontWeight: 'bold', fontSize: 10 }}>
                  Duration: {phase.duration || 'TBD'}
                </PDFText>
              </PDFColumn>
              <PDFColumn>
                <PDFText style={{ fontWeight: 'bold', fontSize: 10 }}>
                  Resources: {phase.resources || 'TBD'}
                </PDFText>
              </PDFColumn>
            </PDFRow>
            
            {phase.tasks && phase.tasks.length > 0 && (
              <>
                <PDFText style={{ fontWeight: 'bold', marginTop: 10, marginBottom: 5 }}>
                  Key Tasks:
                </PDFText>
                <PDFList items={phase.tasks} />
              </>
            )}
          </PDFCard>
        ))}
      </PDFSection>
    )}
    
    {roadmap.timeline && (
      <PDFSection>
        <PDFHeading2>Timeline Overview</PDFHeading2>
        <PDFText>{roadmap.timeline}</PDFText>
      </PDFSection>
    )}
  </View>
)

/**
 * Implementation Guidance Section
 */
const ImplementationGuidanceSection = ({ guidance }) => (
  <View style={pdfStyles.pageBreak}>
    <PDFHeading1>Implementation Guidance</PDFHeading1>
    
    {guidance.overview && (
      <PDFSection>
        <PDFText>{guidance.overview}</PDFText>
      </PDFSection>
    )}
    
    {guidance.bestPractices && guidance.bestPractices.length > 0 && (
      <PDFSection>
        <PDFHeading2>Best Practices</PDFHeading2>
        <PDFList items={guidance.bestPractices} />
      </PDFSection>
    )}
    
    {guidance.recommendations && guidance.recommendations.length > 0 && (
      <PDFSection>
        <PDFHeading2>Recommendations</PDFHeading2>
        <PDFList items={guidance.recommendations} />
      </PDFSection>
    )}
    
    {guidance.toolsAndTechnologies && guidance.toolsAndTechnologies.length > 0 && (
      <PDFSection>
        <PDFHeading2>Recommended Tools & Technologies</PDFHeading2>
        
        {guidance.toolsAndTechnologies.map((tool, index) => (
          <PDFCard key={index} style={{ marginBottom: 10 }}>
            <PDFText style={{ fontWeight: 'bold', marginBottom: 5 }}>
              {tool.name || `Tool ${index + 1}`}
            </PDFText>
            {tool.description && (
              <PDFText small>{tool.description}</PDFText>
            )}
            {tool.category && (
              <PDFText small style={{ fontStyle: 'italic', marginTop: 5 }}>
                Category: {tool.category}
              </PDFText>
            )}
          </PDFCard>
        ))}
      </PDFSection>
    )}
    
    {guidance.nextSteps && guidance.nextSteps.length > 0 && (
      <PDFSection>
        <PDFHeading2>Next Steps</PDFHeading2>
        <PDFList items={guidance.nextSteps} />
      </PDFSection>
    )}
  </View>
)

export default AuditReportPDF